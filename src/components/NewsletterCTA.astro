---
export interface Props {
  title?: string;
  description?: string;
  buttonText?: string;
}

const { 
  title = "Stay Updated",
  description = "Get the latest insights delivered to your inbox",
  buttonText = "Subscribe"
} = Astro.props;
---

<div class="newsletter-cta">
  <div class="newsletter-content">
    <div class="newsletter-icon">
      <svg width="40" height="40" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <rect x="2" y="4" width="20" height="16" rx="2"/>
        <path d="m22 7-10 5L2 7"/>
      </svg>
    </div>
    <div class="newsletter-text">
      <h3 class="newsletter-title">{title}</h3>
      <p class="newsletter-description">{description}</p>
    </div>
    <form class="newsletter-form" id="newsletter-form">
      <input 
        type="email" 
        placeholder="Enter your email" 
        class="newsletter-input"
        required
        aria-label="Email address"
      />
      <button type="submit" class="newsletter-button">
        {buttonText}
        <svg class="button-arrow" width="20" height="20" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
          <path d="M5 12h14m-7-7 7 7-7 7"/>
        </svg>
      </button>
    </form>
    <p class="newsletter-privacy">
      <svg width="16" height="16" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
        <rect x="3" y="11" width="18" height="11" rx="2" ry="2"/>
        <path d="M7 11V7a5 5 0 0 1 10 0v4"/>
      </svg>
      We respect your privacy. Unsubscribe at any time.
    </p>
  </div>
  <div class="newsletter-success" id="newsletter-success">
    <svg class="success-icon" width="48" height="48" viewBox="0 0 24 24" fill="none" stroke="currentColor" stroke-width="2">
      <path d="M22 11.08V12a10 10 0 1 1-5.93-9.14"/>
      <polyline points="22 4 12 14.01 9 11.01"/>
    </svg>
    <h3>Success!</h3>
    <p>You're now subscribed to our newsletter.</p>
  </div>
</div>

<style>
  .newsletter-cta {
    position: relative;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 24px;
    padding: 48px;
    margin: 48px 0;
    box-shadow: 0 20px 60px rgba(102, 126, 234, 0.3);
    overflow: hidden;
  }

  .newsletter-cta::before {
    content: '';
    position: absolute;
    top: -50%;
    right: -50%;
    width: 200%;
    height: 200%;
    background: radial-gradient(circle, rgba(255, 255, 255, 0.1) 0%, transparent 70%);
    animation: float 20s infinite ease-in-out;
  }

  @keyframes float {
    0%, 100% { transform: translate(0, 0) rotate(0deg); }
    50% { transform: translate(-30px, -30px) rotate(180deg); }
  }

  .newsletter-content {
    position: relative;
    z-index: 1;
  }

  .newsletter-icon {
    display: inline-flex;
    padding: 16px;
    background: rgba(255, 255, 255, 0.2);
    border-radius: 16px;
    color: white;
    margin-bottom: 24px;
  }

  .newsletter-title {
    color: white;
    font-size: 32px;
    font-weight: 700;
    margin: 0 0 8px 0;
  }

  .newsletter-description {
    color: rgba(255, 255, 255, 0.9);
    font-size: 18px;
    margin: 0 0 32px 0;
  }

  .newsletter-form {
    display: flex;
    gap: 16px;
    flex-wrap: wrap;
  }

  .newsletter-input {
    flex: 1;
    min-width: 250px;
    padding: 16px 20px;
    border: 2px solid rgba(255, 255, 255, 0.3);
    border-radius: 12px;
    background: rgba(255, 255, 255, 0.1);
    color: white;
    font-size: 16px;
    backdrop-filter: blur(10px);
    transition: all 0.3s ease;
  }

  .newsletter-input::placeholder {
    color: rgba(255, 255, 255, 0.6);
  }

  .newsletter-input:focus {
    outline: none;
    border-color: white;
    background: rgba(255, 255, 255, 0.2);
  }

  .newsletter-button {
    display: flex;
    align-items: center;
    gap: 8px;
    padding: 16px 32px;
    background: white;
    color: #764ba2;
    border: none;
    border-radius: 12px;
    font-size: 16px;
    font-weight: 600;
    cursor: pointer;
    transition: all 0.3s ease;
  }

  .newsletter-button:hover {
    transform: translateY(-2px);
    box-shadow: 0 10px 30px rgba(0, 0, 0, 0.2);
  }

  .button-arrow {
    transition: transform 0.3s ease;
  }

  .newsletter-button:hover .button-arrow {
    transform: translateX(4px);
  }

  .newsletter-privacy {
    display: flex;
    align-items: center;
    gap: 8px;
    margin-top: 20px;
    color: rgba(255, 255, 255, 0.8);
    font-size: 14px;
  }

  .newsletter-success {
    position: absolute;
    top: 0;
    left: 0;
    right: 0;
    bottom: 0;
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
    background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
    border-radius: 24px;
    opacity: 0;
    transform: scale(0.95);
    pointer-events: none;
    transition: all 0.5s ease;
    color: white;
    text-align: center;
  }

  .newsletter-success.show {
    opacity: 1;
    transform: scale(1);
    pointer-events: all;
  }

  .success-icon {
    margin-bottom: 16px;
    animation: checkmark 0.6s ease;
  }

  @keyframes checkmark {
    0% { transform: scale(0) rotate(-45deg); }
    50% { transform: scale(1.2) rotate(0deg); }
    100% { transform: scale(1) rotate(0deg); }
  }

  .newsletter-success h3 {
    font-size: 28px;
    margin: 0 0 8px 0;
  }

  .newsletter-success p {
    font-size: 16px;
    margin: 0;
    opacity: 0.9;
  }

  @media (max-width: 640px) {
    .newsletter-cta {
      padding: 32px 24px;
    }

    .newsletter-title {
      font-size: 24px;
    }

    .newsletter-description {
      font-size: 16px;
    }

    .newsletter-form {
      flex-direction: column;
    }

    .newsletter-input {
      min-width: auto;
    }

    .newsletter-button {
      width: 100%;
      justify-content: center;
    }
  }
</style>

<script>
  document.addEventListener('DOMContentLoaded', () => {
    const form = document.getElementById('newsletter-form') as HTMLFormElement;
    const success = document.getElementById('newsletter-success');
    
    if (form && success) {
      form.addEventListener('submit', async (e) => {
        e.preventDefault();
        
        const formData = new FormData(form);
        const email = formData.get('email');
        
        // Simulate API call
        await new Promise(resolve => setTimeout(resolve, 1000));
        
        // Show success message
        success.classList.add('show');
        
        // Reset form after delay
        setTimeout(() => {
          form.reset();
          success.classList.remove('show');
        }, 3000);
      });
    }
  });
</script>
